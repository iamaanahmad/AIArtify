#!/usr/bin/env node

/**
 * LazAI Testnet Deployment Script
 * 
 * This script deploys the AIArtifyVerification contract to LazAI testnet
 * and updates the configuration with the deployed contract address.
 * 
 * Usage: node scripts/deploy-lazai-testnet.js
 */

const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

// LazAI Testnet Configuration (OFFICIAL ENDPOINTS)
const LAZAI_TESTNET_CONFIG = {
  chainId: 133718,
  name: 'LazAI Testnet',
  rpcUrl: 'https://testnet.lazai.network',
  explorerUrl: 'https://testnet-explorer.lazai.network'
};

// Contract compilation artifact (will be generated by Hardhat)
const CONTRACT_ARTIFACT = {
  contractName: 'AIArtifyVerification',
  abi: [
    {
      "inputs": [
        {"internalType": "string", "name": "artworkId", "type": "string"},
        {"internalType": "bytes32", "name": "promptHash", "type": "bytes32"},
        {"internalType": "bytes32", "name": "reasoningHash", "type": "bytes32"},
        {"internalType": "uint256", "name": "qualityScore", "type": "uint256"},
        {"internalType": "uint256", "name": "consensusNodes", "type": "uint256"},
        {"internalType": "string", "name": "metadataUri", "type": "string"}
      ],
      "name": "storeVerification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{"internalType": "string", "name": "artworkId", "type": "string"}],
      "name": "getVerification",
      "outputs": [
        {
          "components": [
            {"internalType": "bytes32", "name": "promptHash", "type": "bytes32"},
            {"internalType": "bytes32", "name": "reasoningHash", "type": "bytes32"},
            {"internalType": "uint256", "name": "qualityScore", "type": "uint256"},
            {"internalType": "uint256", "name": "consensusNodes", "type": "uint256"},
            {"internalType": "uint256", "name": "timestamp", "type": "uint256"},
            {"internalType": "address", "name": "verifier", "type": "address"},
            {"internalType": "string", "name": "metadataUri", "type": "string"},
            {"internalType": "bool", "name": "isVerified", "type": "bool"}
          ],
          "internalType": "struct AIArtifyVerification.VerificationRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStats",
      "outputs": [
        {"internalType": "uint256", "name": "totalArtworks", "type": "uint256"},
        {"internalType": "uint256", "name": "totalVerified", "type": "uint256"},
        {"internalType": "uint256", "name": "averageQuality", "type": "uint256"}
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  bytecode: "0x608060405234801561001057600080fd5b50611234806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80636352211e116100665780636352211e146101285780638da5cb5b1461013b57806395d89b411461014c578063a22cb46514610154578063b88d4fde1461016757600080fd5b806301ffc9a71461009857806306fdde03146100c0578063081812fc146100d557806323b872dd14610115575b600080fd5b6100ab6100a636600461098a565b61017a565b60405190151581526020015b60405180910390f35b6100c86101cc565b6040516100b791906109fe565b6100e86100e3366004610a11565b61025e565b6040516001600160a01b0390911681526020016100b7565b610123610123366004610a2a565b6102a5565b005b6100e8610136366004610a11565b61030c565b600654604080516001600160a01b0390921682526020016100b7565b6100c861036c565b610123610162366004610a66565b61037b565b610123610175366004610aa2565b610386565b60006001600160e01b031982166380ac58cd60e01b14806101ab57506001600160e01b03198216635b5e139f60e01b145b806101c657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546101db90610b1e565b80601f016020809104026020016040519081016040528092919081815260200182805461020790610b1e565b80156102545780601f1061022957610100808354040283529160200191610254565b820191906000526020600020905b81548152906001019060200180831161023757829003601f168201915b5050505050905090565b600061026982610390565b61028c5760405162461bcd60e51b815260040161028390610b58565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6102ae826103ef565b6001600160a01b0316816001600160a01b0316146103065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e65786044820152607960f81b6064820152608401610283565b50505050565b6000818152600260205260408120546001600160a01b0316806101c65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610283565b6060600180546101db90610b1e565b61030633838361044f565b61030683838361051e565b6000908152600260205260409020546001600160a01b0316151590565b6000818152600260205260408120546001600160a01b03166101c65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610283565b816001600160a01b0316836104b15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610283565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61052882826105ce565b610534848484846106a3565b61030657600080fd5b6105476103ef565b6001600160a01b0316816001600160a01b0316146105a75760405162461bcd60e51b815260206004820152601860248201527f4552433732313a206e6f74206f776e6572206e6f7220617070726f76656400006044820152606401610283565b6105b0826103ef565b6001600160a01b0316836001600160a01b03161461030657600080fd5b6105d7826103ef565b6001600160a01b0316816001600160a01b03161461063d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610283565b6001600160a01b03821661069f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610283565b6106a8826103ef565b506000806020819052604081206001600160a01b03851680825260056020908152604080842033855290915282205460ff1680610700575084600052600460205260406000205490565b905080610750576040516001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b50505050565b50505050565b600080fd5b600080fd5b60006001600160e01b0319821682036107835750600190565b6101c682610789565b50565b919050565b60008083601f8401126107a357600080fd5b50813567ffffffffffffffff8111156107bb57600080fd5b6020830191508360208285010111156107d357600080fd5b9250929050565b600080602083850312156107ed57600080fd5b823567ffffffffffffffff81111561080457600080fd5b6108108582860161078e565b90969095509350505050565b60005b8381101561083757818101518382015260200161081f565b838111156103065750506000910152565b6000815180845261086081602086016020860161081c565b601f01601f19169290920160200192915050565b6020815260006108876020830184610848565b9392505050565b6000602082840312156108a057600080fd5b5035919050565b80356001600160a01b038116811461078957600080fd5b600080604083850312156108d157600080fd5b6108da836108a7565b946020939093013593505050565b6000806000606084860312156108fd57600080fd5b610906846108a7565b9250610914602085016108a7565b9150604084013590509250925092565b60006020828403121561093657600080fd5b610887826108a7565b60008060006040848603121561095457600080fd5b61095d846108a7565b9250602084013567ffffffffffffffff81111561097957600080fd5b6109858682870161078e565b9497909650939450505050565b60006020828403121561099c57600080fd5b8135610887816109a9565b6001600160e01b0319811681146109bd57600080fd5b50565b600080604083850312156109d357600080fd5b6109dc836108a7565b9150602083013580151581146109f157600080fd5b809150509250929050565b60208152600061088760208301845b50565b600060208284031215610a2057600080fd5b61088782610a07565b610a3381610a07565b90509250925092565b634e487b7160e01b600052602260045260246000fd5b60006001820161069257634e487b7160e01b600052601160045260246000fd5b60008060008060808587031215610a7a57600080fd5b610a83856108a7565b9350610a91602086016108a7565b93969395505050506040820135916060013590565b600080600080600060808688031215610abe57600080fd5b610ac7866108a7565b9450610ad5602087016108a7565b935060408601359250606086013567ffffffffffffffff811115610af857600080fd5b610b048882890161078e565b969995985093965092949392505050565b634e487b7160e01b600052602260045260246000fd5b600181811c90821680610b3257607f821691505b602082108103610b5257634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526018908201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006040820152606001610283565b"
};

async function deployContract() {
  console.log('üöÄ Starting LazAI Testnet Deployment...\n');
  
  // Load environment variables
  const privateKey = process.env.PRIVATE_KEY;
  if (!privateKey) {
    throw new Error('PRIVATE_KEY environment variable is required');
  }
  
  console.log('üì° Connecting to LazAI Testnet...');
  const provider = new ethers.JsonRpcProvider(LAZAI_TESTNET_CONFIG.rpcUrl);
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log(`üí∞ Deployer address: ${wallet.address}`);
  
  // Check balance
  const balance = await provider.getBalance(wallet.address);
  console.log(`üí∞ Balance: ${ethers.formatEther(balance)} LAZAI`);
  
  if (balance === 0n) {
    console.log('‚ö†Ô∏è  Warning: Zero balance detected. You may need LAZAI testnet tokens.');
    console.log('üìù Please visit the LazAI testnet faucet to get test tokens.');
  }
  
  // Create contract factory
  console.log('\nüèóÔ∏è  Deploying AIArtifyVerification contract...');
  const contractFactory = new ethers.ContractFactory(
    CONTRACT_ARTIFACT.abi,
    CONTRACT_ARTIFACT.bytecode,
    wallet
  );
  
  try {
    // Deploy the contract
    const contract = await contractFactory.deploy({
      gasLimit: 3000000,
      gasPrice: ethers.parseUnits('20', 'gwei')
    });
    
    console.log(`üìÉ Transaction hash: ${contract.deploymentTransaction().hash}`);
    console.log('‚è≥ Waiting for deployment confirmation...');
    
    // Wait for deployment
    await contract.waitForDeployment();
    const contractAddress = await contract.getAddress();
    
    console.log('\n‚úÖ Contract deployed successfully!');
    console.log(`üìç Contract address: ${contractAddress}`);
    console.log(`üîç Explorer: ${LAZAI_TESTNET_CONFIG.explorerUrl}/address/${contractAddress}`);
    
    // Update the configuration file
    updateConfigFile(contractAddress);
    
    // Test the contract
    await testContract(contract);
    
    console.log('\nüéâ LazAI Testnet deployment completed successfully!');
    console.log('\nüìã Next steps:');
    console.log('1. ‚úÖ Contract deployed and tested');
    console.log('2. ‚úÖ Configuration file updated');
    console.log('3. üîÑ Update frontend to use real LazAI explorer links');
    console.log('4. üîÑ Enable production LazAI integration');
    
    return {
      contractAddress,
      deploymentTransaction: contract.deploymentTransaction().hash,
      explorerUrl: `${LAZAI_TESTNET_CONFIG.explorerUrl}/address/${contractAddress}`
    };
    
  } catch (error) {
    console.error('‚ùå Deployment failed:', error);
    throw error;
  }
}

function updateConfigFile(contractAddress) {
  console.log('\nüìù Updating configuration file...');
  
  const configPath = path.join(__dirname, '..', 'src', 'lib', 'lazai-testnet-config.ts');
  let configContent = fs.readFileSync(configPath, 'utf8');
  
  // Update the contract address
  configContent = configContent.replace(
    /verificationContract: '0x0000000000000000000000000000000000000000'/,
    `verificationContract: '${contractAddress}'`
  );
  
  fs.writeFileSync(configPath, configContent);
  console.log('‚úÖ Configuration updated with deployed contract address');
}

async function testContract(contract) {
  console.log('\nüß™ Testing deployed contract...');
  
  try {
    // Test getting stats (should return zeros for new contract)
    const stats = await contract.getStats();
    console.log(`üìä Initial stats: ${stats[0]} artworks, ${stats[1]} verified, ${stats[2]} avg quality`);
    
    // Test storing a verification
    console.log('üíæ Testing verification storage...');
    const testTx = await contract.storeVerification(
      'test-artwork-1',
      ethers.keccak256(ethers.toUtf8Bytes('test prompt')),
      ethers.keccak256(ethers.toUtf8Bytes('test reasoning')),
      8500, // 85.00% quality score
      5,    // 5 consensus nodes
      'ipfs://QmTestHash123'
    );
    
    await testTx.wait();
    console.log('‚úÖ Test verification stored successfully');
    
    // Verify the data was stored
    const verification = await contract.getVerification('test-artwork-1');
    console.log(`üìã Stored verification: Quality ${verification.qualityScore}, Nodes ${verification.consensusNodes}`);
    
  } catch (error) {
    console.error('‚ùå Contract test failed:', error);
    throw error;
  }
}

// Main execution
if (require.main === module) {
  deployContract()
    .then((result) => {
      console.log('\nüéØ Deployment result:', result);
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Deployment failed:', error);
      process.exit(1);
    });
}

module.exports = { deployContract, LAZAI_TESTNET_CONFIG };
